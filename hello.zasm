; "Test Hello ZASM made by slobodan"

.new	6
%ZVERSION::	.BYTE	6
%ENDLOD::	ENDLOD
%START::	GO
%VOCAB::	VOCAB
%OBJECT::	OBJECT
%GLOBAL::	GLOBAL
%PURBOT::	IMPURE

; equal field
TRUE-VALUE=1
FALSE-VALUE=0
FATAL-VALUE=2
BEND-WILL-SPELL="abcd"

P?EBITS=38

.GSTR STR?753,"It felt like a good time to retire, but Bergon wouldn't hear of it. ""We were told not to tarry here in Zan; frankly, I am not comfortable here. We must not sleep until we have arranged to charter a boat at the wharf!"""
HAVENT-CHOSEN-BOAT=STR?753

GLOBAL:: .TABLE                       ; global vars would go here
	.GVAR TEST1=1
	.GVAR TEST2=2
	.ENDT
OBJECT:: .TABLE                        ; objects would go here
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	0			
	1			
	0			
	.OBJECT ROOT_OBJ,0,0,0,0,CHILD1_OBJ,CHILD1_OBJ,T?BEND-WILL-SPELL
	.OBJECT CHILD1_OBJ,0,0,0,ROOT_OBJ,CHILD2_OBJ,CHILD2_OBJ,T?BEND-WILL-SPELL
	.OBJECT CHILD2_OBJ,0,0,0,ROOT_OBJ,CHILD3_OBJ,CHILD3_OBJ,T?BEND-WILL-SPELL
	.OBJECT CHILD3_OBJ,0,0,0,ROOT_OBJ,0,0,T?BEND-WILL-SPELL	
	.ENDT

OBJPRP::

T?BEND-WILL-SPELL::	.TABLE			; TABLE FOR OBJECT BEND-WILL-SPELL
	.STRL ""
	.PROP 2,P?EBITS
	34
	.BYTE	0
	.ENDT	
IMPURE::                        ; end of dynamic memory

; Some programs like to have a dictionary even though we
; never use it. This is a minimal dictionary.
VOCAB:: .TABLE
        .BYTE 0                 ; # of breaking punctuation marks
        .BYTE 4                 ; entry length (not that we have any)
        .WORD 0                 ; # of entries
		.ENDT
; We will use abbreviations, though. First we define the strings.
        .FSTR FSTR1," of beer on the wall"
        .FSTR FSTR2," bottle"

; Now we put them in the game's abbreviation table.
WORDS:: .TABLE
        FSTR1                   ; .WORD is implied if we just give
        FSTR2                   ; an expression with nothing in front
		.ENDT
ENDLOD::                        ; end of low memory

; Execution begins at the START label. We should still
; include a routine header even though this isn't really
; a routine, so local labels will work (if we have any,
; which in this case we don't).
        .FUNCT GO:ANY:0:0 
START::
		PRINTI "Hello. We well implement 1 opcodes."
		
        CALL1 TEST			    ; call the TEST routine
        FSTACK                  ; we don't need its result
        QUIT                    ; game over once it returns

        .FUNCT TEST:ANY:0:1,N,VAL,TBL
TOP:    PRINTN N
        PRINTI "This is in function."	
		
		INC	TEST1				; Increase global variable
		PRINTN TEST1			; Print global variable
		DEC TEST2				; Decrease global variable
		PRINTN TEST2			; Print global variable
		
		VALUE N >VAL		
		LOC	CHILD2_OBJ >VAL
		FIRST? ROOT_OBJ >VAL END
		NEXT? ROOT_OBJ >VAL END
		
		PRINT HAVENT-CHOSEN-BOAT	; This is quad pointer string
		PRINTB FSTR1				; This is ordinary byte string
		PRINTD ROOT_OBJ				; Print Short description	
		
		ZERO? N	NO-S-1			; if(n == 0) goto NO-S-1
        JUMP NO-S-2				; else goto NO-S-2
NO-S-1: PRINTI "Input parameter is 0"	; print input value is 0
        JUMP END        		; end
NO-S-2: PRINTI "Input paramter is not 1"	; print input value is 1
END:
        PRINTI "Function end!"
		PTSIZE	TBL >VAL			;
		RETURN VAL
        .END

